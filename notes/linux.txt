索引
    shell
    linux

---------------------------    shell    ---------------------------

&       在后台执行
&&      前一条成功后，才执行后一条
|       管道，上一条的输出作为下一条命令参数
||      上一条命令失败后，才执行下一条
>       标准输出重定向 覆盖内容
2>      错误输出
2>&1    将错误输出都输出到1中
&>      错误正确都输出
>>      追加输出在后面一行继续输出
;       分割命令

系统变量
    $? 上一条命令执行后返回的状态，0正常，非0异常
    $0 当前执行程序或脚本名
    $# 脚本后面接的参数个数
    $* 脚本后面所有参数，参数当成一个整体输出，每一个变量参数之间以空格隔开
    $@ 脚本后面所有参数，参数独立，也是全部输出
    $1~$9 $1表示第一个参数
    ${10}~${n} 第10位参数 要大括号
    $$ 所在进程号
    $! 后台运行的最后一个进程号
    !$ 调用最后一条命令历史中的参数

cat > file <<EOF (以EOF作为输入结束)
1
2
3
EOF
<<-EOF()结束标志不需要顶格
用来创建文件
在这之后输入任何东西 都是在 文件里的
输入完成之后EOF结尾
file里面的内容是1 2 3

通配符
    * 匹配0或者多个任意字符
    ？匹配任意单个字符
    [list] 匹配[list]括号里任意单个字符[0-9]零到九 [2-1]没有这种写法 [1-13]1-1和字符3
    [!list] 取反
    {str1,str2,...}匹配更多字符串 {1..13}表示1到13

双引号"" 把内容看作整体，允许$符号引用其他变量
单引号'' 内容看作整体，禁止引用其他变量，特殊符号被视为普通符号
反撇号`` 反撇号和$一样，引号或括号内的命令优先执行，存在嵌套，反撇号不能引用

数组
    arry=()
    长度:${#arry[*]}
    
字典
    定义
        declare -A lcd_dict
    赋值
        lcd_dict=(["0"]="30" ["1"]="31")
    调用
        echo ${lcd_dict["0"]}

IFS内置分隔符
    默认space tab newline分割, 即遇到定义的代表前后分割
        set | grep IFS | od -b 显示
            IFS=$' \t\n'
            如定义IFS=： 
                test="a:b:c" 
                echo test # a b c
        自定义
            OLD_IFS=$IFS
            IFS=$'\n' #定义为newline分割
            OLD_IFS=$IFS
        
        lcd_dict=(["0"]="30" ["1"]="31" [" "]="60")
        IFS="" #定义为空,即""内部全部为一部分$i即为a b c,字典中无包含$i
        IFS=$'\n' #定义为newline分割, 遇到newline即为新字符故此可以识别空格
        for i in `echo "a b c" | sed -e 's#\(.\)#\1\n#g'`
        do
            echo ${lcd_dict["$i"]}
        done
        
        
/bin/sh --> bash
/bin/bash

加载配置文件
    source xxx(配置文件)

基本语法
    执行
        chmod +x xxx.sh (给权限可以执行) 
        bash xxx.sh (不需要权限)
            -x 执行并查看过程

    第一行 #!/bin/env 解释器(防止写死)  #!/bin/env bash
    #!/bin/bash
        
    交互式遍历
        read [opt] 变量名
            -p 提示用户的信息
            -n 定义字符数
            -s 不显示
            -t 定义超时时间
            
    流程控制
    {程序}& 将程序放在后台执行 可以让脚本继续执行下面内容，若需要等待完成则在等待位置前加wait
        条件判断格式
            test 条件表达式
            [ 条件表达式 ](有空格) -a(与) -o(或) 
            [[ 条件表达式 ]] 支持正则表达式 && ||
            数值
                -eq 等于则为真
                -ne 不等于则为真
                -gt 大于则为真
                -ge 大于等于则为真
                -lt 小于则为真
                -le 小于等于则为真
            字符
                =   等于则为真
                !=  不相等则为真
                -z "字符串"    字符串的长度为零则为真
                -n "字符串"    字符串的长度不为零则为真
            文件
                -e 文件名  如果文件存在则为真
                -r 文件名  如果文件存在且可读则为真
                -w 文件名  如果文件存在且可写则为真
                -x 文件名  如果文件存在且可执行则为真
                -s 文件名  如果文件存在且至少有一个字符则为真
                -d 文件名  如果文件存在且为目录则为真
                -f 文件名  如果文件存在且为普通文件则为真
                -c 文件名  如果文件存在且为字符型特殊文件则为真
                -b 文件名  如果文件存在且为块特殊文件则为真

        选择语句
            if [ condition ];then
                command
            fi
            
            if [ condition ];then
                command
            elif [ condition ];then
                command
            else
                command
            fi
        
        for循环
            continue 跳过下面步骤，开始下一次循环
            break 跳出循环体
            exit 跳出程序
            列表循环
                list变量给variable
                for variable(变量) in {list}(决定循环次数)
                    do
                        command
                    done
            
            不带列表循环
                传参进variable
                for variable(变量)
                    do
                        command
                    done
            
            类C
                for (( exp1;exp2;exp2 ))
                    do
                        command
                    done
        
        while循环
            while 表达式
                do
                    command
                done
        
        case语句
            case var in
                pattern|1) (可以用|分割 相当于or) 匹配到pattern或者1执行下面语句
                    command
                    ;;(分号代表结束)
                *)(上面不满足执行default)
                    command
                ;;
            esac
            
        shift 参数向左移位，默认移移位

函数
    函数名() / function 函数名()
    {
        command
        return 
    }
    传参
        函数名() 1 2 3 (传参)
    
    返回值
        return $(abc) 可用$?获取
        cde=$(函数名)
    
    调用别的文件
        source 路径/文件名
    
    使用函数
        函数名

---------------------------    linux    ---------------------------

软件
    获取最近的软件包的列表
        apt-get update
    更新升级所有软件
        apt-get upgrade [名：更新某个软件]
    列出可更新的软件
        apt-get dist-upgrade
    查找软件所在软件包名
        apt-cache search 软件
    安装
        apt-get install 名
    删除一个软件包
        apt-get remove 名
    升级系统
        apt-get dist-upgrade
    下载软件锁住
        sudo rm /var/cache/apt/archives/lock 
        sudo rm /var/lib/dpkg/lock-frontend
        sudo rm /var/lib/dpkg/lock
    
    deb包
        dpkg 
            -X 解压
            -i 安装
            -c 列出内容
            -r 移除已安装
            -l 列出已安装
            -e 解压所有
        dpkg-deb -b 压缩

            
文本处理
    grep：根据关键字进行过滤
        grep [opt] '关键字' 文件名
        -n 打印行号
        -i 忽略大小写
        ^ 行首以...开头'^...' &行尾 grep -n '...$'
        -A 包含...后几行 -B前几行 -C前后几行
        -c 统计有几个符合
        -v 取反
        -q 不显示
    
    cut：列截取工具
        cut [opt] 文件名
        -c 字符为单位分割 从滴几个字符开始截取-cn-m 第n个字符到m个字符
        -d 自定义分隔符 以...为分隔符 左边是第一列 右边是第二列
            /bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/X11R6/bin:/usr/games
            -d: -f1,4-->/bin:/usr/sbin -d: -f2,3-->/usr/bin:/sbin
        -f 截取区域-fn,m 第n列和第m列 n-m第n到m列
    
    sort 用于排序 首字符向后按ASCII码升序输出
        sort [opt] 文件名
        -n 数字排序
        -t 分隔符
        -k 第几列
        -u 去重
    
    unip 去除连续重复行
        unip [opt] 文件名
        
    diff 比较文件不同
        diff [] ... ...
        -b 不检查空格
        -B 不检查空白行
        -i 不检查大小写
        -w 忽略所有空格
        -c 上下文格式 
        -u 合并模式
        -r 比较子目录的文件
        -a 强制比较二进制文件
        
    patch 补丁
        -p 忽略目录层数
        生成
            单个文件
                diff -u file1 file2 > aaa.patch 输出到补丁文件
            目录
                diff -aurN a/ b/
        打补丁
            单个文件
                patch file1 < aaa.patch 将不同写入file1中 达到与file2相同
            目录
                patch -p1 < ../aaa.patch
    
    tr 字符转换 替换 删除；用于删除文件中控制字符或字符转换 str1用于查询 str2用于转换
        命令结果给tr 
            commands | tr 'str1' 'str2'
        处理内容来自文件
            tr 'str1' 'str2' < file
            tr '/, #' '%' < file 将所有[/ , 空格 #]替换成%
        匹配str进行相应操作
            tr [] 'str1' < file 
            -d 删除字符串1中所输入
            -s 删除所有重复出现序列，只保留第一个
            -c 反选
        'a-z' 所有小写
        'A-Z' 所有大写
        '0-9' 所有数字
        'a-zA-Z' 所有字母包含大小写
        cat /dev/urandom | tr -dc a-zA-Z0-9@# | head -c 10;echo 
        
    
    sed(行处理文本工具，一行放入缓冲区处理)
        sed [opt] '处理工作(动作)' 文件名
        -e 进行多项编辑
        -n 取消默认输出
        -r 使用扩展正则
        -i 修改源文件
        -f 指定sed脚本的文件名
        '/(匹配字段)/'
        'p' 打印 '2p'第二行 '$p'最后一行 '1,3p'1-3行
        'i' 在指定行之前插入 'ihello' 每一行前面插入hello 因为行处理 读取一行处理一个
        'a' 在指定行之后插入
        'c' 替换指定行所有内容'$chello world' 最后一行替换成hello world
        'd' 删除指定行 '$d'删除最后一行 '3d'删除第三行
        '/[0-9]/d' //里面可以使用正则表达式
        's' 搜索替换 sed 选项 's/搜索内容/替换内容/动作g(一般是p(打印)/g(全局替换))' 文件名 /为分隔符 可以统一改变如将所有分隔符变为@
            & 保存查找串以便在替换串中引用 与\(\)作用一样
            windows 格式 CR LF(\r\n)
            Linxu 格式 LF(\n)
    
    awk(列处理工具)
        awk [opt] '命令'(shell变量用双引号) 文件名
            -F 定义字段分割符,默认的分隔符是空格
            -v 定义变量并赋值
            '...(正则表达式(可有可无)/定位作用) {awk语句}(awk语句用{})'
                多个语句用;隔开
            相关变量
                $0 当前处理行的所有记录
                $1,$2 awk -F: '{print $1,$3}' 文件中以每行:分割不同字段 打印第一列 第三列,以:分割
                NF 当前记录的字段数(列)
                $NF 最后一列
                NR 行号
            
            awk 'NR==1,NR==5{print $0}' 打印一到五行
                'NR==1 || NR==5' 第一和第五行
            awk '/root/{print $0}' 打印包含root关键字
            awk -F: '/root/{print $1,$NF}' 打印以：分割包含root字段的第一列与最后一列
            循环10列遇到aaa打印aaa和列数
                awk '{for(i=0;i<10;i++){ if($i == "aaa") print $i i }}'
        工作原理
            awk使用一行作为输入,换行符结束,将这一行赋给内部变量$0
        
配置网络
    命令：dhclient ：自动获取ip
    修改/etc/network/interfaces
        # interfaces(5) file used by ifup(8) and ifdown(8)
        # Include files from /etc/network/interfaces.d:
        source-directory /etc/network/interfaces.d

        auto lo
        iface lo inet loopback

        # The primary network interface
        auto eth0(设置的网卡)
        iface eth0 inet static(静态，动态需要为dhcp)
            address 192.168.201.100
            netmask 255.255.255.0
            gateway 192.168.201.254
            dns-nameservers 202.97.224.68 202.97.224.69
    
    DNS配置位置
        /etc/resolv.conf 
        nameserver xxx.xxx.xxx.xxx
    使网卡配置生效
        sudo /etc/init.d/networking restart
    使 DNS 生效
        sudo /etc/init.d/resolvconf restart
    
    dhclient后 warning：/etc/resolv.conf is not a symbolic link to /run/resolvconf/resolv.conf
            sudo rm /etc/resolv.conf
            sudo ln -s /run/resolvconf/resolv.conf /etc/resolv.conf
            systemctl restart resolvconf
                
    查看所有网卡
        ifconfig -a 

    网口使能(查看哪些网口连接网线)
        ifconfig eth0 up/down 

    对应网口配置ip
        ifconfig eth0 xx.xxx.xx.xx netmask xxx.xxx.xxx.xxx(255.255.0.0)
            
    网关配置
        route add  default gw ....(10.50.0.1)
        route add -net 10.6.0.0 netmask 255.255.252 gw 10.3.0.1 eth0
            10.6.0.0 netmask 255.255.252.0 网段走 10.3.0.1网关,通过eth0网卡走
           
root用户无法ssh连接
    修改/etc/ssh/sshd_config中PermitRootLogin
        修改为PermitRootLogin yes
        service sshd restart

Linux之间互传文件
    scp命令
    scp local_file remote_username@remote_ip:remote_folder [-r(递归目录)]
    scp remote_username@remote_ip:remote_folder local(本地目录)
    
Linux与Windows互传文件
    利用FTP filezilla
        SSH连接端口22
ftp
    ftp IP/域名/user@域名
    ftp IP 端口
    匿名服务器
        Name:anonymous
        Password:
    下载文件
        设置本地下载目录
        lcd /home/...
        get file
        mget file
    关闭提问
        prompt off
    上传文件
        put file
    查看帮助
        help commd
        
tftp
    -g 下载文件
    -p 上传文件
    -l 本地文件名
    -r 远程文件名
    tftp -g -l i2c-test -l i2c-test IP
    
    tftp IP
    帮助
        tftp>? 
    
直接下载
    wget --user 用户名 --password 密码 ftp://IP:PORT/

连接库
    查看需要库
        ldd file 
    
    添加动态库路径
        /etc/ld.so.conf 
            ldconfig
        LD_LIBRARY_PATH环境变量添加动态库
    查看库
        ldconfig

    
解压缩命令
    tar -f [-t(查看内容)] [x解压] [c压缩] 
        -z 有gzip属性的  gz  压缩时间短
        -j 有bz2属性的   bz2 压缩率好,时间长
        -J 有xz属性的    xz
        -T 从文件获取名字压缩
        -C 到指定目录
        
磁盘       
    进去分区模式
        fdisk /dev/..(对应磁盘)
        依次根据提示输入n p 1 w(保存)
        
    开机自动挂载
        /etc/fstab
    
    查看UUID
        blkid
    
    列出所有可用块设备
        lsblk
    
    更改分区
        parted -s /dev/sdb mklabel msdos
        
    SATA读写速度测试
        time dd if=SATA硬盘 of=/dev/null bs=1M(同时设置读入/输出的块大小为1MB字节) count=10000(指定拷贝多少个块)
        hdparm -tT /dev/sdx
        简单读写 随机文件(/dev/urandom)写入磁盘中 在从磁盘中读出 测试md5值
    
    增大或收缩未加载的文件系统(修改前/后使用,否则可能使df看不到)
        resize2fs
    
    LVM操作
        PV
            pvcreate
            pvscan
            pvdisplay
            pvremove
        VG
            vgcreate
                vgcreate [vg_name] [pv]*n
            vgscan
            vgdisplay
            vgextend : 将pv加入vg卷中
                vgextend [vg_name] [pv]
            vgreduce : 将pv从vg卷中移除
                vgreduce [vg_name] [pv]
            vgchange
            vgremove
        LVM
            lvcreate : 从vg_name中创建大小为size名称为name的lvm 
                lvcreate -L [size] -n [name] [vg_name]
                lvcreate -l 100%FREE -n [name] [vg_name]
                    -L 大小
                    -l 数量百分比
            lvdisplay
            lvscan
            lvextend ：增加lv大小
                lvextend -L +size[b|k|m|g] lv_name
            lvreduce ：减少lv大小
                lvreduce -L -size[b|k|m|g] lv_name
            lvremove
            lvresize : 调整大小
                lvresize -L +/-size[b|k|m|g] lv_name

查看pcie
    lspci -n
    09:00:slot.0 0c04: 1077:2432 (rev 03)
    09:00.0:bus number(8bit 256):device number(5bit 32):slot(槽位).function(3bit 8)
    Linux中用 Class ID + Vendor ID + Device ID
        0c04:1077:2432
    查看/usr/share/hwdata/pci.ids 得知0c04:1077:2432含义
    lspci -n -d Vendor ID:Device ID -vvv
    lspci -s 域:总线:插槽.功能

查看i2c
    /dev/i2c-X下对应编号查看/sys/class/i2c-dev/i2c-X/name
    下载i2c-tool 
    i2cdetect -l:显示所有可用的I2C总线
    i2cdetect -y 总线号:查看总线下所有设备及设备地址
            0 1 2 3 4 ... f
        00:     -- -- --  UU(0x0f)
        10:               UU(0x1f)
    i2cdump -y -f 总线号 设备地址:导出设备地址数据
    i2cset -y -f 总线号 设备地址 寄存器地址 写入数据:向寄存器写入数据
    i2cget -y -f 总线号 设备地址 寄存器地址:从寄存器数据读出

GPIO操作
    echo (pin) > /sys/class/gpio/export:导出相应引脚
    echo out > /sys/class/gpio/gpio(pin)/direction:设置引脚(pin)为输出方向
    cat /sys/class/gpio/gpio(pin)/directio:查看对应方向
    echo 1 > /sys/class/gpio/gpio(pin)/value:设置对应输出值
    echo (pin) > /sys/class/gpio/unexport:取消导出
    
用户空间实例化i2c设备
    创建设备
        echo eeprom(设备名) 0x50(地址) > /sys/bus/i2c/devices/i2c-3(总线号)/new_device
    删除设备
        echo 0x50(地址) > /sys/bus/i2c/devices/i2c-3(总线号)/delete_device

can工具
    CAN2.0一帧最长8Bytes FD最长64Bytes
    ifconfig can0 down(关闭才可以设置)
    ip link set can0 type can bitrate 250000(250Kbps)
    ifconfig can0 up
    
    ip link add type can help 查看帮助
    
docker
    安装docker
        apt-get install docker docker.io
    下载docker镜像(下载超时需要更改下载源)
        docker pull ....
            修改配置文件/etc/docker/daemon.json
            {
                "registry-mirrors": ["https://......com"](自己加速地址)
            }
            
            {
                "registry-mirrors":["https://swyt03nc.mirror.aliyuncs.com"]
            }
            sudo systemctl daemon-reload//重新加载
            sudo systemctl restart docker//重启
            
    查看本地镜像：
        docker images
        
    删除镜像
        docker rmi ...
        
    重命名镜像
        docker tag 旧 新
	
    没有创建container 根据image创建
        docker run --name="容器名称" -d(后台运行)-i(以交互模式运行容器，通常与 -t 同时使用)t(为容器重新分配一个伪输入终端) 
            -v /.../... : /...(将主机目录 映射到容器目录) 镜像名：TAG env LANG=C.UTF-8 /bin/bash
            
    已经创建container
        docker start ...
        
    删除容器
        docker rm -f(通过 SIGKILL 信号强制删除一个运行中的容器) -l(移除容器间的网络连接，而非容器本身)
            -v(删除与容器关联的目录)
        docker rm $(docker ps -a -q) 删除所有已停止的容器
        
    重命名容器
        docekr rename 名称 新名称
        
    docker  ps  -a    # 列出所有曾经运行过的容器记录，以及正在运行的容器记录
    CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS
    容器ID                镜像                命令                创建时间                 状态

    在容器中执行
        docker exec -it [container]  /bin/bash(指定docker容器，用shell解析器交互) 并且进入容器

    从主机复制文件到容器
        docker cp /..../... containerID:/..../...

    退出容器
        exit
        
    从容器中创建新镜像
        docker commit -[opt] containerID 新镜像：TAG

正则表达式
    特殊意义称为元字符
        . 匹配除了换行符意外的任意单个字符
        * 前导字符出现0次或连续多次
        .* 任意长度字符
        ^ 行首以xxx开头 ^abc(以abc开头)
        $ 行尾abc$(以abc结尾)
        + 继续前一个规则
        ^$ 空行
        [] 匹配括号里任意单个字符或一组单个字符
        [^] 匹配不包含括号内任意单个字符或一组单个字符[^ab] 匹配不包含a b
        ^[] 匹配包含括号内任意单个字符或一组单个字符开头^[ab] 匹配包含a b开头
        ^[^] 匹配不包含括号内任意单个字符或一组单个字符开头^[ab] 匹配不包含a b开头
        \< 取单词的头 \<xxx 匹配xxx
        \> 取单词的尾 xxx\> 匹配xxx尾
        \< \> 精确匹配 \<xxx\> 匹配xxx
        \{n\} 匹配前导字符连续出现n次 o\{n\} o出现n次 go\{n\} 匹配go字符其中o连续出现n次
        \{n,\} 匹配前导字符至少出现n次
        \{n,m\} 匹配前导字符至少出现n-m次
        \( \) 保存被匹配的字符 被保存的字符后续依次可以用\1\2替代
        \d 匹配数字[0-9]
        \w 匹配字母数字下划线[a-zA-Z0-9_]
        \s 匹配空格、制表符、换页符[\t\r\n]
        \ 转义字符
        [0-9]\{2\}\.(转义表示为.) 匹配数字[0-9]连续出现2次. 匹配98. 78. 30.
        
        扩展 grep -E  sed -r
        + 匹配一个或多个前导字符
        ? 匹配零个或一个前导字符
        | 或
        () 当做一个整体
        {n} \{n\}
        {n,} \{n,\}
        {n,m} \{n,m\}
        
        ip地址
        0-9 [0-9]
        10-99 [1-9][0-9]
        100-199 1[0-9]{2}
        200-249 2[0-4][0-9]
        250-255 25[0-5]
        grep -E "([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}"

    第二类
        man tr找到
        [:alnum:] 字母与数字字符
    位于元字符前面的字符为前导符

