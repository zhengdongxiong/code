用户借助UNIX/linux直接提供的少量函数可以对文件和设备进行访问和控制，这些函数就是系统调用[1]。
linux 5个系统调用
    open,write,read,close,ioctl
=========================================================================================
用户态切换到内核态的 3 种方式
a.  系统调用
b.  异常
c.  外围设备的中断 
整系统调用程总结：
    1、程序调用libc 库的封装函数。
    2、调用软中断int 0x80  进入内核。
    3、在内核中首先执行system_call 函数（首先将系统调用号(eax)和可以用到的所有CPU寄存器保存到相应的堆栈中（由SAVE_ALL完成），接着根据系统调用号在系统调用表中查找      
到对应的系统调用服务例程。
    4、执行该服务例程。
    5、执行完毕后，转入ret_from_sys_call 例程，从系统调用返回
=========================================================================================
Linux执行ls，会引起哪些系统调用
任何shell都会执行 exec 和 fork
而    ls会执行read
=========================================================================================
df 主要是查看文件系统占用的磁盘空间使用情况；
du 主要是可以查看指定文件和目录所占用的空间大小。
top查看CPU占用
netst查看网络
free看内存
=========================================================================================
route：route命令是在本地 IP 路由表中显示和修改条目网络命令。
tracert：tracert（跟踪路由）是路由跟踪实用程序，用于确定 IP 数据包访问目标所采取的路径。tracert 命令用 IP 生存时间 (TTL) 字段和 ICMP 错误消息来确定从一个主机到网络上其他 主机的路由。
ping：ping命令可以检查网络是否连通
netstat：netstat是控制台命令,是一个监控TCP/IP网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息
=========================================================================================
linux 系统可以用来查阅全部文件的三种命令： cat 、 more 、 less

more 命令 ：可以让屏幕在显示满一屏幕时，此时可按空格健继续显示下一个画面，或按 Q 键停止显示。

less 命令 ：可以分页显示文件，和 more 命令的区别就在于它支持上下键卷动屏幕，当结束浏览时，只要在 less 命令的提示符“ : ”下按 Q 键即可。

cat 命令 ：主要有三大功能

1 ）一次显示整个文件： $ cat filename

2 ）从键盘创建一个文件： $ cat > filename

3 ）将几个文件合并为一个文件： $ cat file1 file2 > file
=========================================================================================
使用git merge命令；
使用git pull命令； 
使用git cherry-pick命令
都可以合并
执行git blame;命令时,会逐行显示文件,并在每一行的行首显示commit号,提交者,最早的提交日期等
=========================================================================================
$0   #  脚本启动名(包括路径)
$n   #  第n个参数,n=1,2,…9
$*   #  所有参数列表(不包括脚本本身)
$@   #  所有参数列表(独立字符串)
$#   #  参数个数(不包括脚本本身)
$$   #  当前程式的PID
$!   #  执行上一个指令的PID
$?   #  执行上一个指令的返回值

$@和$*均表示所有参数，形式有所不同。$@："$1" "$2" … "$n"； $*: "$1 $2 … $n"。
=========================================================================================
文件结构体P380
=========================================================================================
三段权限分别为：用户(所有者)，组内成员，其余用户       rwx（读写执行）
chmod修改文件权限
chowd修改所有者
=========================================================================================
TCP的握手与分手，可能出现的情形有（）。
    握手需要3次通信
    分手需要进行4次通信  
    FIN和ACK 在同一包里           
    fin和ack不是在同一个bit位上的，所以为什么不能同时发，是因为在四次挥手时，
TCP/IP协议特有的延时应答和捎带应答特性机制可能导致FIN和ACK在同一个包里。延时应答保证了数据的传输最大化，捎带应答是在延时应答的基础上实现的。
因此，有些情况下ACK在发送时由于延时应答机制不会立刻发送，而会等待一段时间，且在这段时间内FIN包刚好准备就绪，系统就会在发送ACK包的同时捎带的发送FIN包，
此时的4次挥手也就变成3次挥手了
    ACK 和SYN 在同一包里
    =========================================================================================
/dev/null就是一个黑洞，移进去的文件就会消失，但非root用户没有执行权限
=========================================================================================
Linux内核的五大模块：进程调度模块、内存管理模块、文件系统模块、进程间通信模块、网络接口模块。

进程调度模块：用来负责控制进程对CPU 资源的使用。所采取的调度策略是各进程能够公平合理地访问CPU，同时保证内核能及时地执行硬件操作；
内存管理模块：用于确保所有进程能够安全地共享机器主内存区，同时，内存管理模块还支持虚拟内存管理方式，使得Linux 支持进程使用比实际内存空间更多的内存容量。并可以利用文件系统，对暂时不用的内存数据块交换到外部存储设备上去，当需要时再交换回来；
文件系统模块：用于支持对外部设备的驱动和存储。虚拟文件系统模块通过向所有的外部存储设备提供一个通用的文件接口，隐藏了各种硬件设备的不同细节。从而提供并支持与其它操作系统兼容的多种文件系统格式；
进程间通信模块：用于支持多种进程间的信息交换方式；
网络接口模块：提供对多种网络通信标准的访问并支持许多网络硬件。
=========================================================================================
Linux驱动连接硬件与应用，根据你对驱动加载的理解，回答如下问题：
（1）insmod和modprobe都可以用来加载驱动模块，请描述这两者的差异。

（2）请给出三种以上Linux驱动模块加载失败的可能原因。

解答：modprobe和insmod类似，都是用来动态加载驱动模块的，区别在于modprobe可以解决load module时的依赖关系，它是通过/lib/modules/#uname -r/modules.dep(.bb)文件来查找依赖关系的；而insmod不能解决依赖问题。

也就是说，如果你确定你要加载的驱动模块不依赖其他驱动模块的话，既可以insmod也可以modprobe，当然insmod可以在任何目录下执行，更方便一些。而如果你要加载的驱动模块还依赖其他ko驱动模块的话，就只能将模块拷贝到上述的特定目录，depmod后再modprobe。
=========================================================================================
%d ,%o ,%x，分别为十进制，八进制，十六进制
C 语言中有三种进制表示
八进制：以 0 开头， 数的每一位不能大于 7
十进制：普通的整数，都是十进制， 数的每一位不能大于 9
十六进制：以 0x,或 0X 开头，数的每一位不能大于F
=========================================================================================
一个字节对齐  
    #pragma pack (1)
        ....
    #pragma pack ()
数据类型
    char    --1     1
    short   --2     2
    int     --4     4
    long    --4     8
    float   --4     4
    double  --8     8
=========================================================================================
xdm （X Display Manager）是一种图形化的登录界面。配置文件都放在/etc/X11/xdm目录下
Xsession文件决定了用户会话的风格，包含用户会话使用的命令
Xsetup_0文件中的程序会和图形登录界面一起运行
GiveConsole文件决定了在Xwindows移交给用户之前要执行的一些程序。 
=========================================================================================
volatile关键字是一种类型修饰符，
用它声明的类型变量表示不可以被某些编译器未知的因素更改，比如：操作系统、硬件或者其它线程等

1、中断服务程序中修改的供其它程序检测的变量需要加volatile；

2、多任务环境下各任务间共享的标志应该加volatile；

3、存储器映射的硬件寄存器通常也要加volatile说明，因为每次对它的读写都可能有不同意义；

另外，以上这几种情况经常还要同时考虑数据的完整性（相互关联的几个标志读了一半被打断了重写），在
1中可以通过关中断来实现，
2 中可以禁止任务调度，
3中则只能依靠硬件的良好设计了。
=========================================================================================
EXT2 inode不包含文件的创建时间，ext3 inode包含。
=========================================================================================
在crontab文件中如何输入需要执行的命令和时间。该文件中每行都包括六个域，
其中前五个域是指定命令被执行的时间，最后一个域是要被执行的命令。
每个域之间使用空格或者制表符分隔。格式如下： minute hour day-of-month month-of-year day-of-week commands 
第一项是分钟，
第二项是小时，
第三项是一个月的第几天，
第四项是一年的第几个月，
第五项是一周的星期几，
第六项是要执行的命令。
这些项都不能为空，必 须填入。
如果用户不需要指定其中的几项，那么可以使用*代替。因为*是统配符，可以代替任何字符，所以就可以认为是任何时间，也就是该项被忽略了。
=========================================================================================
memcpy速度比memmove快
memmove用于从src拷贝count个字节到dest，如果目标区域和源区域有重叠的话，
memmove能够保证源串在被覆盖之前将重叠区域的字节拷贝到目标区域中。但复制后src内容会被更改。
但是当目标区域与源区域没有重叠则和memcpy函数功能相同。
=========================================================================================
五种赋值方法 ：使用 read 命令，直接赋值，使用命令行参数，使用命令行的输出结果，从文件读取
1. 直接赋值，格式为：变量名 = 变量值
2.Read 命令是系统内置命令，语法格式为： read  变量 1   变量 2
3. 使用命令行参数赋值：  $ 命令   参数 1   参数 2  参数 3
4. 利用命令的输出结果赋值：
例如 currentdir=`pwd`  
       echo $currentdir
5. 从文件中读入数据：
例如：
#!/bin/bash
ls *.sh >execfile
while read LINE
do
chmod a+x $LINE
done<execfile
=========================================================================================
A：/etc/hosts 主机名到 IP 地址的映射关系的文件
B： /etc/HOSTNAME，这个文件存的是你的主机名，就比如你的终端的提示符 yourname@hostname ，这里的hostname就写在这个文件里面
C：/etc/resolv.conf DNS 服务的配置文件 
D：/etc/gateways 建立动态路由需要用到的文件 

=========================================================================================
/etc/profile:此文件为系统的为每个用户设置环境信息,当用户第一次登录时,该文件被执行.
并从/etc/profile.d 目录的配置文件中搜集shell的设置.

/etc/bashrc :为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取.

~/.bash_profile :每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该

文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件.
~/.bashrc :该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该
该文件被读取.
~/.bash_logout :当每次退出系统(退出bash shell)时,执行该文件. 

bash_profile 、.bashrc 、和.bash_logout
上面这三个文件是bash shell的用户环境配置文件，位于用户的主目录下。
.bash_profile是最重要的一个配置文件，它在用户每次登录系统时被读取，里面的所有 命令都会被bash执行。
    .profile(由Bourne Shell和Korn Shell使用)和.login(由C Shell使用)两个文件是.bash_profile的同义词，目的是为了兼容其它Shell。 在Debian中使用.profile文件代 替.bash_profile文件。
.bashrc 文件会在bash shell调用另一个bash shell时读取，也就是在shell中再键入bash命令启动一个新shell时就会去读该文件。
    这样可有效分离登录和子shell所需的环境。但一般 来说都会在.bash_profile里调用.bashrc脚本以便统一配置用户环境。
.bash_logout 在退出shell时被读取。所以我们可把一些清理工作的命令放到这文件中。

登录Linux时，首先启动 /etc/profile 文件，然后再启动用户目录下的 ~/.bash_profile、 ~/.bash_login或 ~/.profile文件中的其中一个(根据不同的linux操作系统的不同，命名不一样)，执行的顺序为：~/.bash_profile、 ~/.bash_login、 ~/.profile。
如果 ~/.bash_profile文件存在的话，一般还会执行 ~/.bashrc文件。
=========================================================================================
这是两个不同的命令，关于grep：
Linux系统中grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹 配的行打印出来。grep全称是Global Regular Expression Print，表示全局正则表达式版本，它的使用权限是所有用户。

而linux下的find
功能：在目录结构中搜索文件，并执行指定的操作。此命令提供了相当多的查找条件，功能很强大。
语法：find 起始目录 寻找条件 操作 
说明：find命令从指定的起始目录开始，递归地搜索其各个子目录，查找满足寻找条件的文件并对之采取相关的操作。

所以简单点说说，grep是查找匹配条件的行，find是搜索匹配条件的文件。
=========================================================================================
Find是一个非常有效的工具，它可以遍历当前目录甚至于整个文件系统来查找某些文件或目录.

主要选项:
-name 按照文件名查找文件
-perm 按照文件权限来查找文件
-prune 不在当前指定的目录中查找
-user 按照文件属主来查找文件
-group 按照文件所属的组来查找文件
-mtime -n +n 按照文件的更改时间来查找文件，-n表示文件更改时间距现在n天以内，+ n表示文件更改时间距现在n天以前.
-nogroup 查找无有效所属组的文件，即该文件所属的组不存在
-nouser 查找无有效属主的文件
-newer file1 ! file2 查找更改时间比文件file1新但比文件file2旧的文件
-type 查找某一类型的文件

文件类型：
b 块设备文件
d 目录
c 字符设备文件
p 管道文件
l 符号链接文件
f 普通文件
=========================================================================================

tar

-c: 建立压缩档案
-x：解压
-t：查看内容
-r：向压缩归档文件末尾追加文件
-u：更新原压缩包中的文件

这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。

-z：有gzip属性的
-j：有bz2属性的
-Z：有compress属性的
-v：显示所有过程
-O：将文件解开到标准输出

下面的参数-f是必须的

-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。

=========================================================================================