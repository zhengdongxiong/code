
src := $(dir)


subdir     :=
obj        :=
obj-deps   :=
single     :=
multi      :=
lib        :=
curlib     :=
sublib     :=
arlib      :=
shlib      :=


# Include subdir Makefile
# ---------------------------------------------------------------------------
build-dir  :=
build-file := $(src)/Makefile
sinclude $(build-file)


# Object variables
# ---------------------------------------------------------------------------
subdir := $(patsubst %/, %, $(subdir))

ifneq ($(lib),)
lib    := $(lib)
curlib := lib$(libname).o
sublib := $(foreach m, $(subdir), $(m)/$(curlib))
arlib  := lib$(libname).a
shlib  := lib$(libname).so
endif

multi    := $(foreach m, $(obj), $(if $($(m:%.o=%)-objs), $(m)))
single   := $(filter-out $(multi), $(obj))

obj      := $(single) $(foreach m, $(multi), $($(m:%.o=%)-objs))
obj-deps := $(obj:%.o=%.d)
single   := $(patsubst %.o, %, $(single))
multi    := $(patsubst %.o, %, $(multi))

define rule-multi
$(foreach m, $(notdir $1), \
	$(eval $(dir)/$m: \
	$(addprefix $(dir)/, $($(m)-objs))))
endef


# Add subdir path
# ---------------------------------------------------------------------------
subdir     := $(addprefix $(dir)/, $(subdir))
obj        := $(addprefix $(dir)/, $(obj))
obj-deps   := $(addprefix $(dir)/, $(obj-deps))
single     := $(addprefix $(dir)/, $(single))
multi      := $(addprefix $(dir)/, $(multi))
lib        := $(addprefix $(dir)/, $(lib))
curlib     := $(addprefix $(dir)/, $(curlib))
sublib     := $(addprefix $(dir)/, $(sublib))
arlib      := $(addprefix $(dir)/, $(arlib))
shlib      := $(addprefix $(dir)/, $(shlib))


# CMD define
#         echo_xxxx will be printed
#         cmd_xxxx will be executed
# ---------------------------------------------------------------------------
echo_cmd = $(if $(echo_$(1)),echo "    $(echo_$(1))";)
cmd = $(Q)$(if $(cmd_$(1)), $(echo_cmd)$(cmd_$(1)))

# Compile and assemble
# ---------------------------------------------------------------------------
echo_cc = CC      $@
cmd_cc = $(CC) $(CPPFLAGS) $(CPPFLAGS_$(@F)) \
	$(CFLAGS) $(CFLAGS_$(@F)) -c $< -o $@

# Linking
# ---------------------------------------------------------------------------
echo_ld = LD      $@
cmd_ld = $(CC) $(LDFLAGS) $(LDFLAGS_$(@F)) $< \
		$(LIBS) $(LIBS_$(@F)) -o $@

# Linking multi file
# ---------------------------------------------------------------------------
echo_ld_multi = LD      $@
cmd_ld_multi = $(CC) $(LDFLAGS) $(LDFLAGS_$(@F)) $^ \
		$(LIBS) $(LIBS_$(@F)) -o $@  #$(filter-out FORCE, $^)

# Compile libs
# ---------------------------------------------------------------------------
echo_lib_obj = LD      $@
cmd_lib_obj = $(LD) -r $^ -o $@  #$(filter-out FORCE, $^)

# Archive
# ---------------------------------------------------------------------------
echo_ar = AR      $@
cmd_ar = $(AR) rcsPT $@ $^ #$(filter-out FORCE, $^)

# Share library
# ---------------------------------------------------------------------------
echo_shlib = LLD     $@
cmd_shlib = $(CC) -shared $(lib-flags) $^ $(lib-libs) \
		-o $@ #$(filter-out FORCE, $^)

# Dependency
# ---------------------------------------------------------------------------
echo_deps = GEN     $@
cmd_deps = $(CC) -MM $< > $@

# Clean
# ---------------------------------------------------------------------------
echo_clean = CLEAN   $(src)
cmd_clean = rm -rf $(clean-files)

# Install header
# ---------------------------------------------------------------------------
echo_hdrinst = INSTALL $(hdr_dir)
cmd_hdrinst = mkdir -p $(inst_path); cp -r $(hdr_dir) $(inst_path)

# Install header
# ---------------------------------------------------------------------------
echo_libinst = INSTALL $(lib_dir)
cmd_libinst = mkdir -p $(inst-libdir); \
	cp -r $(arlib) $(shlib) $(inst-libdir); \
	mv $(link-lib) $(addprefix $(inst-libdir)/, $(shlib-ver)); \
	ln -sf $(shlib-ver) $(link-lib)

# Install bin
# ---------------------------------------------------------------------------
echo_bininst = INSTALL $@
cmd_bininst = mkdir -p $(inst_bindir); cp -r $@ $(inst_bindir)

# Uninstall
# ---------------------------------------------------------------------------
echo_uninst = UNINST  $(uninst_path)
cmd_uninst = rm -rf $(uninst_path)


###
# Shorthand for $(Q)$(MAKE) -f scripts/Makefile.build dir=
# Usage:
# $(Q)$(MAKE) $(build)=dir
build := -f scripts/Makefile.build dir

###
# Shorthand for $(Q)$(MAKE) -f scripts/Makefile.clean dir=
# Usage:
# $(Q)$(MAKE) $(clean)=dir
clean := -f scripts/Makefile.clean dir

###
# Shorthand for $(Q)$(MAKE) -f scripts/Makefile.hdrinst dir=
# Usage:
# $(Q)$(MAKE) $(inst)=dir
hdrinst := -f scripts/Makefile.hdrinst dir

###
# Shorthand for $(Q)$(MAKE) -f scripts/Makefile.libinst dir=
# Usage:
# $(Q)$(MAKE) $(inst)=dir
libinst := -f scripts/Makefile.libinst dir

###
# Shorthand for $(Q)$(MAKE) -f scripts/Makefile.bininst dir=
# Usage:
# $(Q)$(MAKE) $(inst)=dir
bininst := -f scripts/Makefile.bininst dir

###
# Shorthand for $(Q)$(MAKE) -f scripts/Makefile.uninst dir=
# Usage:
# $(Q)$(MAKE) $(inst)=dir
uninst := -f scripts/Makefile.uninst dir
